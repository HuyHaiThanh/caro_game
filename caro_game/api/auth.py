import frappe
from frappe import _
from frappe.utils import cint, validate_email_address
import time
import re

@frappe.whitelist(allow_guest=True)
def login(usr, pwd):
    try:
        # Chu·∫©n h√≥a email
        usr = usr.strip().lower() if usr else usr
        
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
        if not frappe.db.exists("User", {"email": usr}):
            return {"success": False, "error": _("Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω")}
        
        # ƒê·∫£m b·∫£o c∆° s·ªü d·ªØ li·ªáu ƒë√£ commit t·∫•t c·∫£ c√°c thay ƒë·ªïi tr∆∞·ªõc ƒë√≥
        frappe.db.commit()
        
        # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c t·∫°o ho√†n to√†n
        time.sleep(0.5)
        
        frappe.local.login_manager.authenticate(usr, pwd)
        frappe.local.login_manager.post_login()
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
        player = frappe.get_all('Player', filters={'user': frappe.session.user}, fields=['name'])
        
        # N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ h·ªì s∆° ng∆∞·ªùi ch∆°i, t·∫°o m·ªõi
        if not player:
            create_player_profile(frappe.session.user)
            
        return {"success": True}
    except frappe.AuthenticationError:
        return {"success": False, "error": _("Sai email ho·∫∑c m·∫≠t kh·∫©u")}
    except frappe.DoesNotExistError:
        return {"success": False, "error": _("Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω")}
    except Exception as e:
        frappe.log_error(f"L·ªói ƒëƒÉng nh·∫≠p: {str(e)}", "Login Error")
        return {"success": False, "error": _("ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.")}

@frappe.whitelist(allow_guest=True)
def register(email, password, display_name):
    try:
        # Ki·ªÉm tra email h·ª£p l·ªá
        if not validate_email_address(email):
            return {"success": False, "error": _("Email kh√¥ng h·ª£p l·ªá")}
            
        # Chu·∫©n h√≥a email
        email = email.strip().lower()
        
        # ƒê·∫£m b·∫£o r·∫±ng transaction hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        frappe.db.commit()
        
        # Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
        user_exists = None
        try:
            user_exists = frappe.db.get_value("User", {"email": email}, ["name", "creation"])
        except:
            pass
            
        if user_exists:
            # X·ª≠ l√Ω k·∫øt qu·∫£ user_exists an to√†n h∆°n
            if isinstance(user_exists, (list, tuple)) and len(user_exists) >= 2:
                user_name, creation_time = user_exists
            else:
                user_name = user_exists
                creation_time = None
            
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c t·∫°o g·∫ßn ƒë√¢y ch∆∞a (trong v√≤ng 5 ph√∫t)
            if creation_time:
                time_diff = frappe.utils.time_diff_in_seconds(frappe.utils.now(), creation_time)
                if time_diff < 300:  # 5 ph√∫t
                    # Ki·ªÉm tra xem ƒë√£ c√≥ h·ªì s∆° ng∆∞·ªùi ch∆°i ch∆∞a
                    player = frappe.db.exists("Player", {"user": email})
                    
                    if not player:
                        # T·∫°o h·ªì s∆° ng∆∞·ªùi ch∆°i n·∫øu ch∆∞a c√≥
                        try:
                            player = create_player_profile(email, display_name)
                        except:
                            pass
                            
                    # B√°o th√†nh c√¥ng ƒë·ªÉ frontend t·ª± ƒëƒÉng nh·∫≠p
                    return {
                        "success": True,
                        "message": _("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o. ƒêang ƒëƒÉng nh·∫≠p..."),
                        "already_registered": True
                    }
            
            # N·∫øu kh√¥ng ph·∫£i ng∆∞·ªùi d√πng t·∫°o g·∫ßn ƒë√¢y, th√¥ng b√°o email ƒë√£ t·ªìn t·∫°i
            return {"success": False, "error": _("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c")}
                
        # Ki·ªÉm tra t√™n hi·ªÉn th·ªã
        if not display_name or len(display_name.strip()) < 3:
            return {"success": False, "error": _("T√™n hi·ªÉn th·ªã ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±")}
            
        # Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
        if len(password) < 6:
            return {"success": False, "error": _("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")}
            
        # T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi c∆° ch·∫ø ph√≤ng ch·ªëng race condition
        auto_commit_was_on = frappe.db.auto_commit_on_many_writes
        frappe.db.auto_commit_on_many_writes = True
        
        try:
            # T·∫°o ng∆∞·ªùi d√πng m·ªõi
            user = frappe.new_doc("User")
            user.email = email
            user.first_name = display_name
            user.send_welcome_email = 0
            user.new_password = password
            user.user_type = "Website User"
            user.flags.no_welcome_mail = True
            user.flags.ignore_permissions = True
            user.flags.ignore_password_policy = True
            user.insert()
            
            # Commit ngay sau khi t·∫°o ng∆∞·ªùi d√πng ƒë·ªÉ tr√°nh deadlock
            frappe.db.commit()
            
            # Th√™m vai tr√≤ Player
            user.add_roles("Player")
            frappe.db.commit()
            
            # T·∫°o h·ªì s∆° ng∆∞·ªùi ch∆°i
            player = create_player_profile(email, display_name)
            
            # ƒê·∫£m b·∫£o m·ªçi thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c l∆∞u
            frappe.db.commit()
            
            # Tr√¨ ho√£n m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u ho√†n to√†n
            time.sleep(1)
            
            return {
                "success": True,
                "message": _("ƒêƒÉng k√Ω th√†nh c√¥ng"),
                "user": user.name,
                "email": email,
                "pwd": password  # Tr·∫£ v·ªÅ m·∫≠t kh·∫©u ƒë·ªÉ frontend t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p
            }
            
        except frappe.DuplicateEntryError:
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p email ƒë√£ t·ªìn t·∫°i (do race condition)
            frappe.db.rollback()
            return {
                "success": True,
                "message": _("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"),
                "already_registered": True,
                "email": email
            }
            
        except Exception as e:
            frappe.db.rollback()
            frappe.log_error(f"L·ªói khi ƒëƒÉng k√Ω: {str(e)}", "Registration Error")
            return {"success": False, "error": str(e)}
            
        finally:
            frappe.db.auto_commit_on_many_writes = auto_commit_was_on
            
    except Exception as e:
        frappe.log_error(f"L·ªói ngo√†i c√πng khi ƒëƒÉng k√Ω: {str(e)}", "Registration Outer Error")
        return {"success": False, "error": _("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.")}

def create_player_profile(user, display_name=None):
    """T·∫°o h·ªì s∆° ng∆∞·ªùi ch∆°i m·ªõi"""
    try:
        if not display_name:
            try:
                user_doc = frappe.get_doc("User", user)
                display_name = user_doc.first_name
            except:
                display_name = "Player"
        
        # Ki·ªÉm tra xem h·ªì s∆° ng∆∞·ªùi ch∆°i ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_player = frappe.db.exists("Player", {"user": user})
        if existing_player:
            return frappe.get_doc("Player", existing_player)
        
        # T·∫°o m·ªõi h·ªì s∆° ng∆∞·ªùi ch∆°i
        player = frappe.new_doc("Player")
        player.user = user
        player.display_name = display_name
        player.rating = 1500
        player.coins = 1000
        player.country = "üáªüá≥"
        player.flags.ignore_permissions = True
        player.insert()
        frappe.db.commit()
        return player
        
    except Exception as e:
        frappe.log_error(f"L·ªói khi t·∫°o h·ªì s∆° ng∆∞·ªùi ch∆°i: {str(e)}", "Player Profile Error")
        frappe.db.rollback()
        # Kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng ƒëƒÉng k√Ω n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c h·ªì s∆° ng∆∞·ªùi ch∆°i
        return None